{"version":3,"sources":["serviceWorker.ts","components/login/loginComponent.tsx","components/register/registerComponent.tsx","components/home/homeComponent.tsx","components/header/headerComponent.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","LoginComponent","className","action","type","placeholder","value","RegisterComponent","state","login","email","password","passwordComfirm","isLoading","handle","event","setState","target","name","doLogin","props","required","this","onChange","onClick","React","Component","HomeComponent","linkArr","HeaderComponent","map","i","key","to","toLocaleLowerCase","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCHSC,EAZkB,WAC7B,OACI,6BACI,4CACA,0BAAMC,UAAU,WAAWC,OAAO,SAC9B,2BAAOC,KAAK,OAAOC,YAAY,UAC/B,2BAAOD,KAAK,WAAWC,YAAY,aACnC,2BAAOD,KAAK,SAASE,MAAM,c,gDCU9BC,G,MAAb,2MAGIC,MAAa,CACTC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,WAAW,GARnB,EAWIC,OAAS,SAACC,GAAD,OAAgB,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOX,SAX/E,EAoCIG,MAAQ,YAGJU,EAFoB,EAAKC,MAAjBD,SAEA,CAAET,MAAO,EAAKF,MAAME,MAAOC,SAAU,EAAKH,MAAMG,YAvChE,wEA0Cc,IAAD,OACL,OACI,6BACI,8CACA,yBAAKT,UAAU,YACX,2BACImB,UAAQ,EACRjB,KAAK,OACLc,KAAK,QACLZ,MAAOgB,KAAKd,MAAMC,MAClBc,SAAUD,KAAKR,OACfT,YAAY,UAEhB,2BACIgB,UAAQ,EACRjB,KAAK,OACLc,KAAK,QACLZ,MAAOgB,KAAKd,MAAME,MAClBa,SAAUD,KAAKR,OACfT,YAAY,UAEhB,2BACIgB,UAAQ,EACRjB,KAAK,WACLC,YAAY,WACZa,KAAK,WACLZ,MAAOgB,KAAKd,MAAMG,SAClBY,SAAUD,KAAKR,SAEnB,2BACIO,UAAQ,EACRjB,KAAK,WACLC,YAAY,mBACZa,KAAK,kBACLZ,MAAOgB,KAAKd,MAAMI,gBAClBW,SAAUD,KAAKR,SAEnB,8BACI,4BAAQU,QAAS,kBAAM,EAAKf,UAA5B,gBAhFxB,GAAuCgB,IAAMC,YCV9BC,EAPiB,WAC5B,OACI,6BACI,oE,cCFNC,G,MAAoB,CAAC,OAAQ,WAAY,UAUhCC,EATmB,WAC9B,OAEQ,yBAAK3B,UAAU,kBACV0B,EAAQE,IAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAG,UAAKD,EAAL,SAAc,kBAAC,IAAD,CAAME,GAAIF,EAAEG,qBAAsBH,QCoBzFI,IAASC,OAAO,kBAjBW,WACvB,OACE,kBAAC,IAAD,KAEE,yBAAKlC,UAAU,OACf,sCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,QAAQC,UAAWZ,IACrC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWtC,IAChC,kBAAC,IAAD,CAAOqC,KAAK,YAAYC,UAAWhC,OAQ7B,MAAciC,SAASC,eAAe,SL4GhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3e5ac1ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport '../login/loginComponent.css'\r\n\r\nconst LoginComponent: React.FC = () => {\r\n    return(\r\n        <div>\r\n            <p>log-in please</p>\r\n            <form className=\"log-form\" action=\"/home\">\r\n                <input type=\"text\" placeholder=\"email\"></input>\r\n                <input type=\"password\" placeholder=\"password\"></input>\r\n                <input type=\"submit\" value=\"submit\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default LoginComponent;","import React from 'react'\r\nimport '../register/registerComponent.css'\r\nimport { Provider } from \"react-redux\";\r\nimport { string } from 'prop-types';\r\nimport { LoginRequest, LoginState } from '../../redux/login/types';\r\n\r\n\r\nexport interface User {\r\n    login: string;\r\n    email: string;\r\n    password: string;\r\n    isLoading: string;\r\n    id: number;\r\n}\r\nexport interface PropsW {\r\n    doLogin: (data: LoginRequest) => object;\r\n    email: string;\r\n    password: string;\r\n\r\n}\r\nexport class RegisterComponent extends React.Component<any, any>{\r\n    \r\n    \r\n    state: any = {\r\n        login: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordComfirm: \"\",\r\n        isLoading: false\r\n    };\r\n\r\n    handle = (event: any) => this.setState({ [event.target.name]: event.target.value } as any);\r\n    // async checkUnicAuth() {\r\n    // let data: any = {...this.state}\r\n    // let users = await fetch('http://localhost:3000/users')\r\n    //    .then(response => response.json())\r\n    //    .then(users => users) \r\n    //    if(users.find((user : User) => user.login == this.state.login || user.email === this.state.email ))\r\n    //    {\r\n    //     alert('user had been decleared, check login or email');\r\n    //     return;\r\n    //    }\r\n\r\n    //     await users.find((user : User) => user.login == this.state.login || user.email === this.state.email ? alert('user had been decleared, check login or email') :\r\n    //         this.state.login.length < 3 ? alert('Name should be at least 3 letters') :\r\n    //         !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(this.state.email) ? alert('Innvalid Email') :\r\n    //         (this.state.password !== this.state.passwordComfirm) || (this.state.password.length < 8) ? alert('Password should match and be at least 8 symbols') : \r\n    //         fetch ( 'http://localhost:3000/users', {\r\n    //             method: 'POST',\r\n    //             body: JSON.stringify (data),\r\n    //             headers: {\r\n    //                 \"Content-type\": \"application/json\"\r\n    //             }\r\n    //         }).then(r => console.log(r))\r\n    //     )       \r\n    // };\r\n    login = () => {\r\n        const { doLogin } = this.props;\r\n        debugger;\r\n        doLogin({ email: this.state.email, password: this.state.password });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>register please</p>\r\n                <div className=\"reg-form\">\r\n                    <input\r\n                        required\r\n                        type=\"text\"\r\n                        name=\"login\"\r\n                        value={this.state.login}\r\n                        onChange={this.handle}\r\n                        placeholder=\"login\">\r\n                    </input>\r\n                    <input\r\n                        required\r\n                        type=\"text\"\r\n                        name=\"email\"\r\n                        value={this.state.email}\r\n                        onChange={this.handle}\r\n                        placeholder=\"email\">\r\n                    </input>\r\n                    <input\r\n                        required\r\n                        type=\"password\"\r\n                        placeholder=\"password\"\r\n                        name=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={this.handle}>\r\n                    </input>\r\n                    <input\r\n                        required\r\n                        type=\"password\"\r\n                        placeholder=\"password comfirm\"\r\n                        name=\"passwordComfirm\"\r\n                        value={this.state.passwordComfirm}\r\n                        onChange={this.handle}>\r\n                    </input>\r\n                    <span>\r\n                        <button onClick={() => this.login()}>Login</button>\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport HeaderComponent from '../header/headerComponent'\r\n\r\nconst HomeComponent: React.FC = () => {\r\n    return(\r\n        <div>\r\n            <p>Here suppose to be main information</p>\r\n        </div>\r\n    )\r\n}\r\nexport default HomeComponent;","import React from 'react'\r\nimport '../header/headerComponent.css'\r\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\n\r\nconst linkArr: string[] = ['Home', 'Register', 'LogIn'] \r\nconst HeaderComponent: React.FC = () => {\r\n    return(\r\n       \r\n            <div className=\"header-wrapper\">\r\n                {linkArr.map(i => <li key={`${i}-key`}><Link to={i.toLocaleLowerCase()}>{i}</Link></li> )}\r\n            </div>\r\n \r\n    )\r\n}\r\nexport default HeaderComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\nimport LoginComponent from './components/login/loginComponent';\nimport { RegisterComponent}  from './components/register/registerComponent';\nimport HomeComponent from './components/home/homeComponent';\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport HeaderComponent from './components/header/headerComponent';\n\nconst MainMain: React.FC = () => {\n    return (\n      <Router>\n          \n        <div className=\"App\">\n        <p>Welcome</p>\n          <HeaderComponent></HeaderComponent>\n          <Route exact path=\"/home\" component={HomeComponent}/>\n          <Route path=\"/login\" component={LoginComponent}/>\n          <Route path=\"/register\" component={RegisterComponent}/>\n          \n        </div>\n      </Router>\n    );\n  }\n  \n\nReactDOM.render(<MainMain />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}